Stack:
A stack is one of the most important and useful non-primitive linear data structure in computer science.
It is an ordered collection of items into which new data items may be added/inserted and from which items may be deleted at only one end, called the top of the stack.
As all the addition and deletion in a stack is done from the top of the stack, the last added element will be first removed from the stack.
That is why the stack is also called Last-in-First-out (LIFO).
The most frequently accessible element in the stack is the top most elements, whereas the least accessible element is the bottom of the stack.
The insertion (or addition) operation is referred to as push, and the deletion (or remove) operation as pop.
A stack is said to be empty or underflow, if the stack contains no elements.
At this point the top of the stack is present at the bottom of the stack. And it is overflow when the stack becomes full, i.e., no other elements can be pushed onto the stack. At this point the top pointer is at the highest location of the stack.

OPERATION PERFORMED ON STACK
The primitive operations (ADT on the stack family) performed on the stack are as follows:
1. PUSH (X,S): The process of adding (or inserting) a new element to the top of the stack is called PUSH operation. Pushing an element to a stack will add the new element at the top.
After every push operation the top is incremented by one. If the array is full and no new
element can be accommodated, then the stack overflow condition occurs.
2. POP(S): The process of deleting (or removing) an element from the top of stack is called POP
operation. After every pop operation the stack is decremented by one. If there is no element
in the stack and the pop operation is performed then the stack underflow condition occurs.
3. MAKENULL (S): Make stack S is an empty stack.
4. TOP (S): Return the elements at the top of the stack.
5. EMPTY (S): Return true if stack S is empty; return false otherwise.
Stack Implementation
1. Static Implementation (Using Arrays)
2. Dynamic Implementation (Using Pointer)
Static implementation using arrays is a very simple technique but is not a flexible way, as the size
of the stack has to be declared during the program design, because after that, the size cannot be
varied (i.e., increased or decreased). Moreover static implementation is not an efficient method
when resource optimization is concerned (i.e., memory utilization). The above said limitations can
be overcome by dynamically implementing (is also called linked list representation) the stack
using pointers.

Algorithm for PUSH
Suppose STACK [SIZE] is a one-dimensional array for implementing the stack, which will hold
the data items. TOP is the pointer that points to the top most element of the stack. Let DATA is
the data item to be pushed.
1. If TOP = SIZE – 1, then:
(a) Display “The stack is in overflow condition”
(b) Exit
2. TOP = TOP + 1
3. STACK [TOP] = ITEM
4. Exit
Algorithm for POP
Suppose STACK [SIZE] is a one-dimensional array for implementing the stack, which will hold
the data items. TOP is the pointer that points to the top most element of the stack. DATA is the
popped (or deleted) data item from the top of the stack.
1. If TOP < 0, then
(a) Display “The Stack is empty”
(b) Exit
2. Else remove the Top most element
a. DATA = STACK[TOP]
b. TOP = TOP – 1
5. Exit

APPLICATION OF STACK
There are a number of applications of stacks. Compiler internally uses stack when we implement
(or execute) any recursive function. If we want to implement a recursive function non-recursively,
stack is programmed explicitly. Stack is also used to evaluate a mathematical expression and to
check the parentheses in an expression.